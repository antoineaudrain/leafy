{
  "{\"sourceRoot\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure\",\"filename\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure\",\"plugins\":[{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-inline-environment-variables\",\"visitor\":{\"MemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"include\":[\"NODE_ENV\"]}},{\"key\":\"transform-runtime\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"MemberExpression\":{\"enter\":[null],\"exit\":[null]},\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"regenerator\":true}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/antoineaudrain/Documents/Workspace/folder-structure/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/antoineaudrain/Documents/Workspace/folder-structure",
      "filename": "/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/antoineaudrain/Documents/Workspace/folder-structure",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-inline-environment-variables",
          "visitor": {
            "MemberExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "include": [
              "NODE_ENV"
            ]
          }
        },
        {
          "key": "transform-runtime",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "MemberExpression": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "regenerator": true
          }
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js",
        "plugins": [
          "optionalChaining",
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/antoineaudrain/Documents/Workspace/folder-structure/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nvar safeReadDirSync = function safeReadDirSync(path) {\n  var dirData = {};\n\n  try {\n    dirData = (0, _fs.readdirSync)(path);\n  } catch (error) {\n    if (error.code === 'EACCES' || error.code === 'EPERM') {\n      return null;\n    }\n\n    throw new Error(error);\n  }\n\n  return dirData;\n};\n\nvar normalizePath = function normalizePath(path) {\n  return path.replace(/\\\\/g, '/');\n};\n\nvar directoryTree = function directoryTree(path, options) {\n  path = (options === null || options === void 0 ? void 0 : options.normalizePath) ? normalizePath(path) : path;\n  var stats = (0, _fs.statSync)(path);\n\n  if (options === null || options === void 0 ? void 0 : options.exclude) {\n    if ([options.exclude].some(function (exclusion) {\n      return path.includes(exclusion);\n    })) {\n      return null;\n    }\n  }\n\n  if (stats.isFile()) {\n    return {\n      path: path,\n      name: (0, _path.basename)(path),\n      size: stats.size,\n      extension: (0, _path.extname)(path).toLowerCase() || null,\n      type: 'file'\n    };\n  } else if (stats.isDirectory()) {\n    var dirData = safeReadDirSync(path);\n\n    if (dirData) {\n      var children = dirData.map(function (child) {\n        return directoryTree((0, _path.join)(path, child), options);\n      }).filter(function (e) {\n        return !!e;\n      });\n      return {\n        path: path,\n        name: (0, _path.basename)(path),\n        children: children,\n        size: children.reduce(function (prev, cur) {\n          return prev + cur.size;\n        }, 0),\n        type: 'directory'\n      };\n    }\n  }\n\n  return null;\n};\n\nconsole.log(directoryTree('../../../Desktop', {\n  normalizePath: true,\n  exclude: '../../../Desktop/cooky-assets'\n}));\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImluZGV4LmpzIl0sIm5hbWVzIjpbInNhZmVSZWFkRGlyU3luYyIsInBhdGgiLCJkaXJEYXRhIiwiZXJyb3IiLCJjb2RlIiwiRXJyb3IiLCJub3JtYWxpemVQYXRoIiwicmVwbGFjZSIsImRpcmVjdG9yeVRyZWUiLCJvcHRpb25zIiwic3RhdHMiLCJleGNsdWRlIiwic29tZSIsImV4Y2x1c2lvbiIsImluY2x1ZGVzIiwiaXNGaWxlIiwibmFtZSIsInNpemUiLCJleHRlbnNpb24iLCJ0b0xvd2VyQ2FzZSIsInR5cGUiLCJpc0RpcmVjdG9yeSIsImNoaWxkcmVuIiwibWFwIiwiY2hpbGQiLCJmaWx0ZXIiLCJlIiwicmVkdWNlIiwicHJldiIsImN1ciIsImNvbnNvbGUiLCJsb2ciXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBQ0E7O0FBRUEsSUFBTUEsZUFBZSxHQUFHLFNBQWxCQSxlQUFrQixDQUFDQyxJQUFELEVBQVU7QUFDaEMsTUFBSUMsT0FBTyxHQUFHLEVBQWQ7O0FBQ0EsTUFBSTtBQUNGQSxJQUFBQSxPQUFPLEdBQUcscUJBQVlELElBQVosQ0FBVjtBQUNELEdBRkQsQ0FFRSxPQUFPRSxLQUFQLEVBQWM7QUFDZCxRQUFJQSxLQUFLLENBQUNDLElBQU4sS0FBZSxRQUFmLElBQTJCRCxLQUFLLENBQUNDLElBQU4sS0FBZSxPQUE5QyxFQUF1RDtBQUNyRCxhQUFPLElBQVA7QUFDRDs7QUFDRCxVQUFNLElBQUlDLEtBQUosQ0FBVUYsS0FBVixDQUFOO0FBQ0Q7O0FBQ0QsU0FBT0QsT0FBUDtBQUNELENBWEQ7O0FBYUEsSUFBTUksYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFDTCxJQUFEO0FBQUEsU0FBVUEsSUFBSSxDQUFDTSxPQUFMLENBQWEsS0FBYixFQUFvQixHQUFwQixDQUFWO0FBQUEsQ0FBdEI7O0FBRUEsSUFBTUMsYUFBYSxHQUFHLFNBQWhCQSxhQUFnQixDQUFDUCxJQUFELEVBQU9RLE9BQVAsRUFBbUI7QUFDdkNSLEVBQUFBLElBQUksR0FBRyxDQUFBUSxPQUFPLFNBQVAsSUFBQUEsT0FBTyxXQUFQLFlBQUFBLE9BQU8sQ0FBRUgsYUFBVCxJQUF5QkEsYUFBYSxDQUFDTCxJQUFELENBQXRDLEdBQStDQSxJQUF0RDtBQUVBLE1BQU1TLEtBQUssR0FBRyxrQkFBU1QsSUFBVCxDQUFkOztBQUVBLE1BQUlRLE9BQUosYUFBSUEsT0FBSix1QkFBSUEsT0FBTyxDQUFFRSxPQUFiLEVBQXNCO0FBQ3BCLFFBQUksQ0FBQ0YsT0FBTyxDQUFDRSxPQUFULEVBQWtCQyxJQUFsQixDQUF1QixVQUFDQyxTQUFEO0FBQUEsYUFBZVosSUFBSSxDQUFDYSxRQUFMLENBQWNELFNBQWQsQ0FBZjtBQUFBLEtBQXZCLENBQUosRUFBcUU7QUFDbkUsYUFBTyxJQUFQO0FBQ0Q7QUFDRjs7QUFFRCxNQUFJSCxLQUFLLENBQUNLLE1BQU4sRUFBSixFQUFvQjtBQUNsQixXQUFPO0FBQ0xkLE1BQUFBLElBQUksRUFBSkEsSUFESztBQUVMZSxNQUFBQSxJQUFJLEVBQUUsb0JBQVNmLElBQVQsQ0FGRDtBQUdMZ0IsTUFBQUEsSUFBSSxFQUFFUCxLQUFLLENBQUNPLElBSFA7QUFJTEMsTUFBQUEsU0FBUyxFQUFFLG1CQUFRakIsSUFBUixFQUFja0IsV0FBZCxNQUErQixJQUpyQztBQUtMQyxNQUFBQSxJQUFJLEVBQUU7QUFMRCxLQUFQO0FBUUQsR0FURCxNQVNPLElBQUlWLEtBQUssQ0FBQ1csV0FBTixFQUFKLEVBQXlCO0FBQzlCLFFBQU1uQixPQUFPLEdBQUdGLGVBQWUsQ0FBQ0MsSUFBRCxDQUEvQjs7QUFFQSxRQUFJQyxPQUFKLEVBQWE7QUFDWCxVQUFNb0IsUUFBUSxHQUFHcEIsT0FBTyxDQUNyQnFCLEdBRGMsQ0FDVixVQUFBQyxLQUFLO0FBQUEsZUFBSWhCLGFBQWEsQ0FBQyxnQkFBS1AsSUFBTCxFQUFXdUIsS0FBWCxDQUFELEVBQW9CZixPQUFwQixDQUFqQjtBQUFBLE9BREssRUFFZGdCLE1BRmMsQ0FFUCxVQUFBQyxDQUFDO0FBQUEsZUFBSSxDQUFDLENBQUNBLENBQU47QUFBQSxPQUZNLENBQWpCO0FBSUEsYUFBTztBQUNMekIsUUFBQUEsSUFBSSxFQUFKQSxJQURLO0FBRUxlLFFBQUFBLElBQUksRUFBRSxvQkFBU2YsSUFBVCxDQUZEO0FBR0xxQixRQUFBQSxRQUFRLEVBQVJBLFFBSEs7QUFJTEwsUUFBQUEsSUFBSSxFQUFFSyxRQUFRLENBQUNLLE1BQVQsQ0FBZ0IsVUFBQ0MsSUFBRCxFQUFPQyxHQUFQO0FBQUEsaUJBQWVELElBQUksR0FBR0MsR0FBRyxDQUFDWixJQUExQjtBQUFBLFNBQWhCLEVBQWdELENBQWhELENBSkQ7QUFLTEcsUUFBQUEsSUFBSSxFQUFFO0FBTEQsT0FBUDtBQU9EO0FBQ0Y7O0FBRUQsU0FBTyxJQUFQO0FBQ0QsQ0F2Q0Q7O0FBeUNBVSxPQUFPLENBQUNDLEdBQVIsQ0FBWXZCLGFBQWEsQ0FBQyxrQkFBRCxFQUFxQjtBQUFFRixFQUFBQSxhQUFhLEVBQUUsSUFBakI7QUFBdUJLLEVBQUFBLE9BQU8sRUFBRTtBQUFoQyxDQUFyQixDQUF6QiIsInNvdXJjZVJvb3QiOiIvVXNlcnMvYW50b2luZWF1ZHJhaW4vRG9jdW1lbnRzL1dvcmtzcGFjZS9mb2xkZXItc3RydWN0dXJlLyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHJlYWRkaXJTeW5jLCBzdGF0U3luYyB9IGZyb20gJ2ZzJ1xuaW1wb3J0IHsgYmFzZW5hbWUsIGV4dG5hbWUsIGpvaW4gfSBmcm9tICdwYXRoJ1xuXG5jb25zdCBzYWZlUmVhZERpclN5bmMgPSAocGF0aCkgPT4ge1xuICBsZXQgZGlyRGF0YSA9IHt9XG4gIHRyeSB7XG4gICAgZGlyRGF0YSA9IHJlYWRkaXJTeW5jKHBhdGgpXG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgaWYgKGVycm9yLmNvZGUgPT09ICdFQUNDRVMnIHx8IGVycm9yLmNvZGUgPT09ICdFUEVSTScpIHtcbiAgICAgIHJldHVybiBudWxsXG4gICAgfVxuICAgIHRocm93IG5ldyBFcnJvcihlcnJvcilcbiAgfVxuICByZXR1cm4gZGlyRGF0YVxufVxuXG5jb25zdCBub3JtYWxpemVQYXRoID0gKHBhdGgpID0+IHBhdGgucmVwbGFjZSgvXFxcXC9nLCAnLycpXG5cbmNvbnN0IGRpcmVjdG9yeVRyZWUgPSAocGF0aCwgb3B0aW9ucykgPT4ge1xuICBwYXRoID0gb3B0aW9ucz8ubm9ybWFsaXplUGF0aCA/IG5vcm1hbGl6ZVBhdGgocGF0aCkgOiBwYXRoXG5cbiAgY29uc3Qgc3RhdHMgPSBzdGF0U3luYyhwYXRoKVxuXG4gIGlmIChvcHRpb25zPy5leGNsdWRlKSB7XG4gICAgaWYgKFtvcHRpb25zLmV4Y2x1ZGVdLnNvbWUoKGV4Y2x1c2lvbikgPT4gcGF0aC5pbmNsdWRlcyhleGNsdXNpb24pKSkge1xuICAgICAgcmV0dXJuIG51bGxcbiAgICB9XG4gIH1cblxuICBpZiAoc3RhdHMuaXNGaWxlKCkpIHtcbiAgICByZXR1cm4ge1xuICAgICAgcGF0aCxcbiAgICAgIG5hbWU6IGJhc2VuYW1lKHBhdGgpLFxuICAgICAgc2l6ZTogc3RhdHMuc2l6ZSxcbiAgICAgIGV4dGVuc2lvbjogZXh0bmFtZShwYXRoKS50b0xvd2VyQ2FzZSgpIHx8IG51bGwsXG4gICAgICB0eXBlOiAnZmlsZSdcbiAgICB9XG5cbiAgfSBlbHNlIGlmIChzdGF0cy5pc0RpcmVjdG9yeSgpKSB7XG4gICAgY29uc3QgZGlyRGF0YSA9IHNhZmVSZWFkRGlyU3luYyhwYXRoKVxuXG4gICAgaWYgKGRpckRhdGEpIHtcbiAgICAgIGNvbnN0IGNoaWxkcmVuID0gZGlyRGF0YVxuICAgICAgICAubWFwKGNoaWxkID0+IGRpcmVjdG9yeVRyZWUoam9pbihwYXRoLCBjaGlsZCksIG9wdGlvbnMpKVxuICAgICAgICAuZmlsdGVyKGUgPT4gISFlKVxuXG4gICAgICByZXR1cm4ge1xuICAgICAgICBwYXRoLFxuICAgICAgICBuYW1lOiBiYXNlbmFtZShwYXRoKSxcbiAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgIHNpemU6IGNoaWxkcmVuLnJlZHVjZSgocHJldiwgY3VyKSA9PiBwcmV2ICsgY3VyLnNpemUsIDApLFxuICAgICAgICB0eXBlOiAnZGlyZWN0b3J5J1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHJldHVybiBudWxsXG59XG5cbmNvbnNvbGUubG9nKGRpcmVjdG9yeVRyZWUoJy4uLy4uLy4uL0Rlc2t0b3AnLCB7IG5vcm1hbGl6ZVBhdGg6IHRydWUsIGV4Y2x1ZGU6ICcuLi8uLi8uLi9EZXNrdG9wL2Nvb2t5LWFzc2V0cycgfSkpIl19",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "safeReadDirSync",
        "path",
        "dirData",
        "error",
        "code",
        "Error",
        "normalizePath",
        "replace",
        "directoryTree",
        "options",
        "stats",
        "exclude",
        "some",
        "exclusion",
        "includes",
        "isFile",
        "name",
        "size",
        "extension",
        "toLowerCase",
        "type",
        "isDirectory",
        "children",
        "map",
        "child",
        "filter",
        "e",
        "reduce",
        "prev",
        "cur",
        "console",
        "log"
      ],
      "mappings": ";;AAAA;;AACA;;AAEA,IAAMA,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AAChC,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAG,qBAAYD,IAAZ,CAAV;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,IAAN,KAAe,QAAf,IAA2BD,KAAK,CAACC,IAAN,KAAe,OAA9C,EAAuD;AACrD,aAAO,IAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAUF,KAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD,CAXD;;AAaA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACL,IAAD;AAAA,SAAUA,IAAI,CAACM,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAV;AAAA,CAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACP,IAAD,EAAOQ,OAAP,EAAmB;AACvCR,EAAAA,IAAI,GAAG,CAAAQ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEH,aAAT,IAAyBA,aAAa,CAACL,IAAD,CAAtC,GAA+CA,IAAtD;AAEA,MAAMS,KAAK,GAAG,kBAAST,IAAT,CAAd;;AAEA,MAAIQ,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEE,OAAb,EAAsB;AACpB,QAAI,CAACF,OAAO,CAACE,OAAT,EAAkBC,IAAlB,CAAuB,UAACC,SAAD;AAAA,aAAeZ,IAAI,CAACa,QAAL,CAAcD,SAAd,CAAf;AAAA,KAAvB,CAAJ,EAAqE;AACnE,aAAO,IAAP;AACD;AACF;;AAED,MAAIH,KAAK,CAACK,MAAN,EAAJ,EAAoB;AAClB,WAAO;AACLd,MAAAA,IAAI,EAAJA,IADK;AAELe,MAAAA,IAAI,EAAE,oBAASf,IAAT,CAFD;AAGLgB,MAAAA,IAAI,EAAEP,KAAK,CAACO,IAHP;AAILC,MAAAA,SAAS,EAAE,mBAAQjB,IAAR,EAAckB,WAAd,MAA+B,IAJrC;AAKLC,MAAAA,IAAI,EAAE;AALD,KAAP;AAQD,GATD,MASO,IAAIV,KAAK,CAACW,WAAN,EAAJ,EAAyB;AAC9B,QAAMnB,OAAO,GAAGF,eAAe,CAACC,IAAD,CAA/B;;AAEA,QAAIC,OAAJ,EAAa;AACX,UAAMoB,QAAQ,GAAGpB,OAAO,CACrBqB,GADc,CACV,UAAAC,KAAK;AAAA,eAAIhB,aAAa,CAAC,gBAAKP,IAAL,EAAWuB,KAAX,CAAD,EAAoBf,OAApB,CAAjB;AAAA,OADK,EAEdgB,MAFc,CAEP,UAAAC,CAAC;AAAA,eAAI,CAAC,CAACA,CAAN;AAAA,OAFM,CAAjB;AAIA,aAAO;AACLzB,QAAAA,IAAI,EAAJA,IADK;AAELe,QAAAA,IAAI,EAAE,oBAASf,IAAT,CAFD;AAGLqB,QAAAA,QAAQ,EAARA,QAHK;AAILL,QAAAA,IAAI,EAAEK,QAAQ,CAACK,MAAT,CAAgB,UAACC,IAAD,EAAOC,GAAP;AAAA,iBAAeD,IAAI,GAAGC,GAAG,CAACZ,IAA1B;AAAA,SAAhB,EAAgD,CAAhD,CAJD;AAKLG,QAAAA,IAAI,EAAE;AALD,OAAP;AAOD;AACF;;AAED,SAAO,IAAP;AACD,CAvCD;;AAyCAU,OAAO,CAACC,GAAR,CAAYvB,aAAa,CAAC,kBAAD,EAAqB;AAAEF,EAAAA,aAAa,EAAE,IAAjB;AAAuBK,EAAAA,OAAO,EAAE;AAAhC,CAArB,CAAzB",
      "sourceRoot": "/Users/antoineaudrain/Documents/Workspace/folder-structure/",
      "sourcesContent": [
        "import { readdirSync, statSync } from 'fs'\nimport { basename, extname, join } from 'path'\n\nconst safeReadDirSync = (path) => {\n  let dirData = {}\n  try {\n    dirData = readdirSync(path)\n  } catch (error) {\n    if (error.code === 'EACCES' || error.code === 'EPERM') {\n      return null\n    }\n    throw new Error(error)\n  }\n  return dirData\n}\n\nconst normalizePath = (path) => path.replace(/\\\\/g, '/')\n\nconst directoryTree = (path, options) => {\n  path = options?.normalizePath ? normalizePath(path) : path\n\n  const stats = statSync(path)\n\n  if (options?.exclude) {\n    if ([options.exclude].some((exclusion) => path.includes(exclusion))) {\n      return null\n    }\n  }\n\n  if (stats.isFile()) {\n    return {\n      path,\n      name: basename(path),\n      size: stats.size,\n      extension: extname(path).toLowerCase() || null,\n      type: 'file'\n    }\n\n  } else if (stats.isDirectory()) {\n    const dirData = safeReadDirSync(path)\n\n    if (dirData) {\n      const children = dirData\n        .map(child => directoryTree(join(path, child), options))\n        .filter(e => !!e)\n\n      return {\n        path,\n        name: basename(path),\n        children,\n        size: children.reduce((prev, cur) => prev + cur.size, 0),\n        type: 'directory'\n      }\n    }\n  }\n\n  return null\n}\n\nconsole.log(directoryTree('../../../Desktop', { normalizePath: true, exclude: '../../../Desktop/cooky-assets' }))"
      ]
    },
    "sourceType": "script",
    "mtime": 1600191618812
  }
}