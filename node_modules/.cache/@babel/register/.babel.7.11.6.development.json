{
  "{\"sourceRoot\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure/\",\"caller\":{\"name\":\"@babel/node\"},\"cwd\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure\",\"filename\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js\",\"cloneInputAst\":true,\"babelrc\":false,\"configFile\":false,\"passPerPreset\":false,\"envName\":\"development\",\"root\":\"/Users/antoineaudrain/Documents/Workspace/folder-structure\",\"plugins\":[{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{}},{\"key\":\"transform-inline-environment-variables\",\"visitor\":{\"MemberExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"include\":[\"NODE_ENV\"]}},{\"key\":\"transform-runtime\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"MemberExpression\":{\"enter\":[null],\"exit\":[null]},\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"regenerator\":true}},{\"key\":\"proposal-numeric-separator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"NumericLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-logical-assignment-operators\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"AssignmentExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-nullish-coalescing-operator\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"LogicalExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-chaining\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"OptionalCallExpression\":{\"enter\":[null]},\"OptionalMemberExpression\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-json-strings\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"DirectiveLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-optional-catch-binding\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"CatchClause\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-parameters\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-async-generator-functions\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-object-rest-spread\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"VariableDeclarator\":{\"enter\":[null]},\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectExpression\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-dotall-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-unicode-property-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-named-capturing-groups-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-async-to-generator\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-exponentiation-operator\",\"visitor\":{\"AssignmentExpression\":{\"enter\":[null]},\"BinaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-template-literals\",\"visitor\":{\"TaggedTemplateExpression\":{\"enter\":[null]},\"TemplateLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-literals\",\"visitor\":{\"NumericLiteral\":{\"enter\":[null]},\"StringLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-function-name\",\"visitor\":{\"FunctionExpression\":{\"exit\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-arrow-functions\",\"visitor\":{\"ArrowFunctionExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoped-functions\",\"visitor\":{\"BlockStatement\":{\"enter\":[null]},\"SwitchCase\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-classes\",\"visitor\":{\"ExportDefaultDeclaration\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-object-super\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-shorthand-properties\",\"visitor\":{\"ObjectMethod\":{\"enter\":[null]},\"ObjectProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-duplicate-keys\",\"visitor\":{\"ObjectExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-computed-properties\",\"visitor\":{\"ObjectExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-for-of\",\"visitor\":{\"ForOfStatement\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-sticky-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-escapes\",\"visitor\":{\"Identifier\":{\"enter\":[null]},\"TemplateElement\":{\"enter\":[null]},\"_exploded\":true,\"StringLiteral\":{\"enter\":[null]},\"DirectiveLiteral\":{\"enter\":[null]},\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-unicode-regex\",\"visitor\":{\"RegExpLiteral\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-spread\",\"visitor\":{\"ArrayExpression\":{\"enter\":[null]},\"CallExpression\":{\"enter\":[null]},\"NewExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-destructuring\",\"visitor\":{\"ExportNamedDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"AssignmentExpression\":{\"enter\":[null]},\"VariableDeclaration\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"ForInStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-block-scoping\",\"visitor\":{\"VariableDeclaration\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"_exploded\":true,\"BlockStatement\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"_verified\":true,\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-typeof-symbol\",\"visitor\":{\"UnaryExpression\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true,\"BlockStatement\":{\"enter\":[null]},\"CatchClause\":{\"enter\":[null]},\"DoWhileStatement\":{\"enter\":[null]},\"ForInStatement\":{\"enter\":[null]},\"ForStatement\":{\"enter\":[null]},\"FunctionDeclaration\":{\"enter\":[null]},\"FunctionExpression\":{\"enter\":[null]},\"Program\":{\"enter\":[null]},\"ObjectMethod\":{\"enter\":[null]},\"SwitchStatement\":{\"enter\":[null]},\"WhileStatement\":{\"enter\":[null]},\"ArrowFunctionExpression\":{\"enter\":[null]},\"ClassExpression\":{\"enter\":[null]},\"ClassDeclaration\":{\"enter\":[null]},\"ForOfStatement\":{\"enter\":[null]},\"ClassMethod\":{\"enter\":[null]},\"ClassPrivateMethod\":{\"enter\":[null]},\"TSModuleBlock\":{\"enter\":[null]},\"AssignmentPattern\":{\"enter\":[null]},\"ArrayPattern\":{\"enter\":[null]},\"ObjectPattern\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-new-target\",\"visitor\":{\"MetaProperty\":{\"enter\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"regenerator-transform\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"ObjectMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassMethod\":{\"enter\":[null],\"exit\":[null]},\"ClassPrivateMethod\":{\"enter\":[null],\"exit\":[null]},\"FunctionDeclaration\":{\"exit\":[null]},\"FunctionExpression\":{\"exit\":[null]},\"ArrowFunctionExpression\":{\"exit\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-member-expression-literals\",\"visitor\":{\"MemberExpression\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-property-literals\",\"visitor\":{\"ObjectProperty\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-reserved-words\",\"visitor\":{\"_exploded\":true,\"_verified\":true,\"Identifier\":{\"enter\":[null,null]},\"JSXIdentifier\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-export-namespace-from\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"ExportNamedDeclaration\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"transform-modules-commonjs\",\"visitor\":{\"CallExpression\":{\"enter\":[null]},\"Program\":{\"exit\":[null]},\"_exploded\":true,\"_verified\":true},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}},{\"key\":\"proposal-dynamic-import\",\"visitor\":{\"_exploded\":{},\"_verified\":{},\"Program\":{\"enter\":[null]}},\"options\":{\"spec\":false,\"loose\":false,\"useBuiltIns\":false}}],\"presets\":[]}:7.11.6": {
    "metadata": {},
    "options": {
      "sourceRoot": "/Users/antoineaudrain/Documents/Workspace/folder-structure/",
      "caller": {
        "name": "@babel/node"
      },
      "cwd": "/Users/antoineaudrain/Documents/Workspace/folder-structure",
      "filename": "/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js",
      "cloneInputAst": true,
      "babelrc": false,
      "configFile": false,
      "envName": "development",
      "root": "/Users/antoineaudrain/Documents/Workspace/folder-structure",
      "sourceMaps": "both",
      "ast": false,
      "passPerPreset": false,
      "plugins": [
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {}
        },
        {
          "key": "transform-inline-environment-variables",
          "visitor": {
            "MemberExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "include": [
              "NODE_ENV"
            ]
          }
        },
        {
          "key": "transform-runtime",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "MemberExpression": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "regenerator": true
          }
        },
        {
          "key": "proposal-numeric-separator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "NumericLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-logical-assignment-operators",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "AssignmentExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-nullish-coalescing-operator",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "LogicalExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-chaining",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "OptionalCallExpression": {
              "enter": [
                null
              ]
            },
            "OptionalMemberExpression": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-json-strings",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-optional-catch-binding",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "CatchClause": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-parameters",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-async-generator-functions",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-object-rest-spread",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "VariableDeclarator": {
              "enter": [
                null
              ]
            },
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-dotall-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-unicode-property-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-named-capturing-groups-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-async-to-generator",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-exponentiation-operator",
          "visitor": {
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "BinaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-template-literals",
          "visitor": {
            "TaggedTemplateExpression": {
              "enter": [
                null
              ]
            },
            "TemplateLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-literals",
          "visitor": {
            "NumericLiteral": {
              "enter": [
                null
              ]
            },
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-function-name",
          "visitor": {
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-arrow-functions",
          "visitor": {
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoped-functions",
          "visitor": {
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchCase": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-classes",
          "visitor": {
            "ExportDefaultDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-object-super",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-shorthand-properties",
          "visitor": {
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "ObjectProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-duplicate-keys",
          "visitor": {
            "ObjectExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-computed-properties",
          "visitor": {
            "ObjectExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-for-of",
          "visitor": {
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-sticky-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-escapes",
          "visitor": {
            "Identifier": {
              "enter": [
                null
              ]
            },
            "TemplateElement": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "StringLiteral": {
              "enter": [
                null
              ]
            },
            "DirectiveLiteral": {
              "enter": [
                null
              ]
            },
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-unicode-regex",
          "visitor": {
            "RegExpLiteral": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-spread",
          "visitor": {
            "ArrayExpression": {
              "enter": [
                null
              ]
            },
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "NewExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-destructuring",
          "visitor": {
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "AssignmentExpression": {
              "enter": [
                null
              ]
            },
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-block-scoping",
          "visitor": {
            "VariableDeclaration": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "_verified": true,
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-typeof-symbol",
          "visitor": {
            "UnaryExpression": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true,
            "BlockStatement": {
              "enter": [
                null
              ]
            },
            "CatchClause": {
              "enter": [
                null
              ]
            },
            "DoWhileStatement": {
              "enter": [
                null
              ]
            },
            "ForInStatement": {
              "enter": [
                null
              ]
            },
            "ForStatement": {
              "enter": [
                null
              ]
            },
            "FunctionDeclaration": {
              "enter": [
                null
              ]
            },
            "FunctionExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "enter": [
                null
              ]
            },
            "ObjectMethod": {
              "enter": [
                null
              ]
            },
            "SwitchStatement": {
              "enter": [
                null
              ]
            },
            "WhileStatement": {
              "enter": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "enter": [
                null
              ]
            },
            "ClassExpression": {
              "enter": [
                null
              ]
            },
            "ClassDeclaration": {
              "enter": [
                null
              ]
            },
            "ForOfStatement": {
              "enter": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ]
            },
            "TSModuleBlock": {
              "enter": [
                null
              ]
            },
            "AssignmentPattern": {
              "enter": [
                null
              ]
            },
            "ArrayPattern": {
              "enter": [
                null
              ]
            },
            "ObjectPattern": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-new-target",
          "visitor": {
            "MetaProperty": {
              "enter": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "regenerator-transform",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "ObjectMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "ClassPrivateMethod": {
              "enter": [
                null
              ],
              "exit": [
                null
              ]
            },
            "FunctionDeclaration": {
              "exit": [
                null
              ]
            },
            "FunctionExpression": {
              "exit": [
                null
              ]
            },
            "ArrowFunctionExpression": {
              "exit": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-member-expression-literals",
          "visitor": {
            "MemberExpression": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-property-literals",
          "visitor": {
            "ObjectProperty": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-reserved-words",
          "visitor": {
            "_exploded": true,
            "_verified": true,
            "Identifier": {
              "enter": [
                null,
                null
              ]
            },
            "JSXIdentifier": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-export-namespace-from",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "ExportNamedDeclaration": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "transform-modules-commonjs",
          "visitor": {
            "CallExpression": {
              "enter": [
                null
              ]
            },
            "Program": {
              "exit": [
                null
              ]
            },
            "_exploded": true,
            "_verified": true
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        },
        {
          "key": "proposal-dynamic-import",
          "visitor": {
            "_exploded": {},
            "_verified": {},
            "Program": {
              "enter": [
                null
              ]
            }
          },
          "options": {
            "spec": false,
            "loose": false,
            "useBuiltIns": false
          }
        }
      ],
      "presets": [],
      "parserOpts": {
        "sourceType": "module",
        "sourceFileName": "/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js",
        "plugins": [
          "optionalChaining",
          "numericSeparator",
          "logicalAssignment",
          "nullishCoalescingOperator",
          "optionalChaining",
          "jsonStrings",
          "optionalCatchBinding",
          "asyncGenerators",
          "objectRestSpread",
          "exportNamespaceFrom",
          "dynamicImport"
        ]
      },
      "generatorOpts": {
        "filename": "/Users/antoineaudrain/Documents/Workspace/folder-structure/index.js",
        "comments": true,
        "compact": "auto",
        "sourceMaps": "both",
        "sourceRoot": "/Users/antoineaudrain/Documents/Workspace/folder-structure/",
        "sourceFileName": "index.js"
      }
    },
    "ast": null,
    "code": "\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nvar _typeof2 = _interopRequireDefault(require(\"@babel/runtime/helpers/typeof\"));\n\nvar _fs = require(\"fs\");\n\nvar _path = require(\"path\");\n\nvar _crypto = _interopRequireDefault(require(\"crypto\"));\n\nvar types = {\n  FILE: 'FILE',\n  DIRECTORY: 'DIRECTORY'\n};\nvar characters = {\n  LAST_ELEMENT: '└─',\n  ELEMENT: '├─',\n  IN_DIRECTORY: ' │',\n  EMPTY: '  '\n};\nvar fontSpecial = {\n  RESET: '\\x1b[0m',\n  BRIGHT: '\\x1b[1m',\n  DIM: '\\x1b[2m',\n  UNDERSCORE: '\\x1b[4m',\n  BLINK: '\\x1b[5m',\n  REVERSE: '\\x1b[7m',\n  HIDDEN: '\\x1b[8m'\n};\nvar fontColors = {\n  BLACK: '\\x1b[37m',\n  RED: '\\x1b[31m',\n  GREEN: '\\x1b[32m',\n  YELLOW: '\\x1b[33m',\n  BLUE: '\\x1b[34m',\n  MAGENTA: '\\x1b[35m',\n  CYAN: '\\x1b[36m',\n  WHITE: '\\x1b[30m'\n};\nvar bgColors = {\n  BLACK: '\\x1b[40m',\n  RED: '\\x1b[41m',\n  GREEN: '\\x1b[42m',\n  YELLOW: '\\x1b[43m',\n  BLUE: '\\x1b[44m',\n  MAGENTA: '\\x1b[45m',\n  CYAN: '\\x1b[46m',\n  WHITE: '\\x1b[47m'\n};\n\nvar safeReadDirSync = function safeReadDirSync(path) {\n  var dirData = {};\n\n  try {\n    dirData = (0, _fs.readdirSync)(path);\n  } catch (error) {\n    if (error.code === 'EACCES' || error.code === 'EPERM') {\n      return null;\n    }\n\n    throw new Error(error);\n  }\n\n  return dirData;\n};\n\nvar normalizePath = function normalizePath(path) {\n  return path.replace(/\\\\/g, '/');\n};\n\nvar directoryTree = function directoryTree(path, options) {\n  path = (options === null || options === void 0 ? void 0 : options.normalizePath) ? normalizePath(path) : path;\n  var stats = (0, _fs.statSync)(path);\n  var name = (0, _path.basename)(path);\n  var currentNode = {\n    name: name\n  };\n\n  if (!(options === null || options === void 0 ? void 0 : options.gui)) {\n    currentNode.path = path;\n  }\n\n  if (options === null || options === void 0 ? void 0 : options.exclude) {\n    var exclusions = (0, _typeof2[\"default\"])(options === null || options === void 0 ? void 0 : options.exclude) === 'object' ? options.exclude : [options.exclude];\n\n    if (exclusions.some(function (exclusion) {\n      return path.includes(exclusion);\n    })) {\n      return null;\n    }\n  }\n\n  if (stats.isFile()) {\n    if (!(options === null || options === void 0 ? void 0 : options.gui)) {\n      currentNode.size = stats.size;\n      currentNode.extension = (0, _path.extname)(path).toLowerCase() || null;\n    }\n\n    if (options === null || options === void 0 ? void 0 : options.hash) {\n      var data = (0, _fs.readFileSync)(path);\n      currentNode.hash = '#' + _crypto[\"default\"].createHash('sha1').update(data).digest('hex').slice(0, 7);\n    }\n\n    currentNode.type = types.FILE;\n    currentNode.hidden = currentNode.name.substr(0, 1) === '.';\n  } else if (stats.isDirectory()) {\n    var dirData = safeReadDirSync(path);\n\n    if (dirData) {\n      var children = dirData.map(function (child) {\n        return directoryTree((0, _path.join)(path, child), options);\n      }).filter(function (e) {\n        return !!e;\n      });\n      currentNode.children = children;\n\n      if (!(options === null || options === void 0 ? void 0 : options.gui)) {\n        currentNode.size = children.reduce(function (prev, cur) {\n          return prev + cur.size;\n        }, 0);\n      }\n\n      currentNode.type = types.DIRECTORY;\n    }\n  } else {\n    return null;\n  }\n\n  return currentNode;\n};\n\nvar chalk = function chalk(text, options) {\n  if (!options) {\n    return text;\n  }\n\n  var _options$color = options.color,\n      color = _options$color === void 0 ? '' : _options$color,\n      _options$special = options.special,\n      special = _options$special === void 0 ? '' : _options$special,\n      _options$background = options.background,\n      background = _options$background === void 0 ? '' : _options$background;\n  return color + special + background + text + fontSpecial.RESET;\n};\n\nvar drawLine = function drawLine(index, nodes, node, depth) {\n  return console.log(chalk(characters.IN_DIRECTORY.repeat(depth)), chalk(index === nodes.length - 1 && node.type !== types.DIRECTORY ? characters.LAST_ELEMENT : characters.ELEMENT), chalk(node.name), node.type === types.FILE && !(node === null || node === void 0 ? void 0 : node.hidden) ? chalk(node.hash, {\n    color: fontColors.BLUE\n  }) : '');\n};\n\nvar drawAsciiTree = function drawAsciiTree(nodes) {\n  var depth = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n  nodes.map(function (node, index) {\n    drawLine(index, nodes, node, depth);\n\n    if (node.type === types.DIRECTORY) {\n      if (!!(node === null || node === void 0 ? void 0 : node.children.length)) {\n        drawAsciiTree(node.children, depth + 1);\n      }\n    }\n  });\n};\n\nvar leafy = function leafy(path, options) {\n  var nodes = directoryTree(path, options);\n\n  if (options === null || options === void 0 ? void 0 : options.gui) {\n    console.log(nodes.name);\n    drawAsciiTree(nodes.children);\n  } // console.log(nodes)\n\n};\n\nleafy('../../../Documents/Workspace/cooky/cooky-server', {\n  exclude: ['node_modules', '.git', '.idea'],\n  hash: true,\n  gui: true\n});\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,",
    "map": {
      "version": 3,
      "sources": [
        "index.js"
      ],
      "names": [
        "types",
        "FILE",
        "DIRECTORY",
        "characters",
        "LAST_ELEMENT",
        "ELEMENT",
        "IN_DIRECTORY",
        "EMPTY",
        "fontSpecial",
        "RESET",
        "BRIGHT",
        "DIM",
        "UNDERSCORE",
        "BLINK",
        "REVERSE",
        "HIDDEN",
        "fontColors",
        "BLACK",
        "RED",
        "GREEN",
        "YELLOW",
        "BLUE",
        "MAGENTA",
        "CYAN",
        "WHITE",
        "bgColors",
        "safeReadDirSync",
        "path",
        "dirData",
        "error",
        "code",
        "Error",
        "normalizePath",
        "replace",
        "directoryTree",
        "options",
        "stats",
        "name",
        "currentNode",
        "gui",
        "exclude",
        "exclusions",
        "some",
        "exclusion",
        "includes",
        "isFile",
        "size",
        "extension",
        "toLowerCase",
        "hash",
        "data",
        "crypto",
        "createHash",
        "update",
        "digest",
        "slice",
        "type",
        "hidden",
        "substr",
        "isDirectory",
        "children",
        "map",
        "child",
        "filter",
        "e",
        "reduce",
        "prev",
        "cur",
        "chalk",
        "text",
        "color",
        "special",
        "background",
        "drawLine",
        "index",
        "nodes",
        "node",
        "depth",
        "console",
        "log",
        "repeat",
        "length",
        "drawAsciiTree",
        "leafy"
      ],
      "mappings": ";;;;;;AAAA;;AACA;;AACA;;AAEA,IAAMA,KAAK,GAAG;AACZC,EAAAA,IAAI,EAAE,MADM;AAEZC,EAAAA,SAAS,EAAE;AAFC,CAAd;AAKA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,YAAY,EAAE,IADG;AAEjBC,EAAAA,OAAO,EAAE,IAFQ;AAGjBC,EAAAA,YAAY,EAAE,IAHG;AAIjBC,EAAAA,KAAK,EAAE;AAJU,CAAnB;AAOA,IAAMC,WAAW,GAAG;AAClBC,EAAAA,KAAK,EAAE,SADW;AAElBC,EAAAA,MAAM,EAAE,SAFU;AAGlBC,EAAAA,GAAG,EAAE,SAHa;AAIlBC,EAAAA,UAAU,EAAE,SAJM;AAKlBC,EAAAA,KAAK,EAAE,SALW;AAMlBC,EAAAA,OAAO,EAAE,SANS;AAOlBC,EAAAA,MAAM,EAAE;AAPU,CAApB;AAUA,IAAMC,UAAU,GAAG;AACjBC,EAAAA,KAAK,EAAE,UADU;AAEjBC,EAAAA,GAAG,EAAE,UAFY;AAGjBC,EAAAA,KAAK,EAAE,UAHU;AAIjBC,EAAAA,MAAM,EAAE,UAJS;AAKjBC,EAAAA,IAAI,EAAE,UALW;AAMjBC,EAAAA,OAAO,EAAE,UANQ;AAOjBC,EAAAA,IAAI,EAAE,UAPW;AAQjBC,EAAAA,KAAK,EAAE;AARU,CAAnB;AAWA,IAAMC,QAAQ,GAAG;AACfR,EAAAA,KAAK,EAAE,UADQ;AAEfC,EAAAA,GAAG,EAAE,UAFU;AAGfC,EAAAA,KAAK,EAAE,UAHQ;AAIfC,EAAAA,MAAM,EAAE,UAJO;AAKfC,EAAAA,IAAI,EAAE,UALS;AAMfC,EAAAA,OAAO,EAAE,UANM;AAOfC,EAAAA,IAAI,EAAE,UAPS;AAQfC,EAAAA,KAAK,EAAE;AARQ,CAAjB;;AAWA,IAAME,eAAe,GAAG,SAAlBA,eAAkB,CAACC,IAAD,EAAU;AAChC,MAAIC,OAAO,GAAG,EAAd;;AACA,MAAI;AACFA,IAAAA,OAAO,GAAG,qBAAYD,IAAZ,CAAV;AACD,GAFD,CAEE,OAAOE,KAAP,EAAc;AACd,QAAIA,KAAK,CAACC,IAAN,KAAe,QAAf,IAA2BD,KAAK,CAACC,IAAN,KAAe,OAA9C,EAAuD;AACrD,aAAO,IAAP;AACD;;AACD,UAAM,IAAIC,KAAJ,CAAUF,KAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD,CAXD;;AAaA,IAAMI,aAAa,GAAG,SAAhBA,aAAgB,CAACL,IAAD;AAAA,SAAUA,IAAI,CAACM,OAAL,CAAa,KAAb,EAAoB,GAApB,CAAV;AAAA,CAAtB;;AAEA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACP,IAAD,EAAOQ,OAAP,EAAmB;AACvCR,EAAAA,IAAI,GAAG,CAAAQ,OAAO,SAAP,IAAAA,OAAO,WAAP,YAAAA,OAAO,CAAEH,aAAT,IAAyBA,aAAa,CAACL,IAAD,CAAtC,GAA+CA,IAAtD;AAEA,MAAMS,KAAK,GAAG,kBAAST,IAAT,CAAd;AACA,MAAMU,IAAI,GAAG,oBAASV,IAAT,CAAb;AACA,MAAMW,WAAW,GAAG;AAAED,IAAAA,IAAI,EAAJA;AAAF,GAApB;;AAEA,MAAI,EAACF,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,GAAV,CAAJ,EAAmB;AACjBD,IAAAA,WAAW,CAACX,IAAZ,GAAmBA,IAAnB;AACD;;AAED,MAAIQ,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEK,OAAb,EAAsB;AACpB,QAAMC,UAAU,GAAG,yBAAON,OAAP,aAAOA,OAAP,uBAAOA,OAAO,CAAEK,OAAhB,MAA4B,QAA5B,GAAuCL,OAAO,CAACK,OAA/C,GAAyD,CAACL,OAAO,CAACK,OAAT,CAA5E;;AACA,QAAIC,UAAU,CAACC,IAAX,CAAgB,UAACC,SAAD;AAAA,aAAehB,IAAI,CAACiB,QAAL,CAAcD,SAAd,CAAf;AAAA,KAAhB,CAAJ,EAA8D;AAC5D,aAAO,IAAP;AACD;AACF;;AAED,MAAIP,KAAK,CAACS,MAAN,EAAJ,EAAoB;AAElB,QAAI,EAACV,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,GAAV,CAAJ,EAAmB;AACjBD,MAAAA,WAAW,CAACQ,IAAZ,GAAmBV,KAAK,CAACU,IAAzB;AACAR,MAAAA,WAAW,CAACS,SAAZ,GAAwB,mBAAQpB,IAAR,EAAcqB,WAAd,MAA+B,IAAvD;AACD;;AACD,QAAIb,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEc,IAAb,EAAmB;AACjB,UAAMC,IAAI,GAAG,sBAAavB,IAAb,CAAb;AACAW,MAAAA,WAAW,CAACW,IAAZ,GAAmB,MAAME,mBAAOC,UAAP,CAAkB,MAAlB,EAA0BC,MAA1B,CAAiCH,IAAjC,EAAuCI,MAAvC,CAA8C,KAA9C,EAAqDC,KAArD,CAA2D,CAA3D,EAA8D,CAA9D,CAAzB;AACD;;AACDjB,IAAAA,WAAW,CAACkB,IAAZ,GAAmBxD,KAAK,CAACC,IAAzB;AACAqC,IAAAA,WAAW,CAACmB,MAAZ,GAAqBnB,WAAW,CAACD,IAAZ,CAAiBqB,MAAjB,CAAwB,CAAxB,EAA2B,CAA3B,MAAkC,GAAvD;AAED,GAbD,MAaO,IAAItB,KAAK,CAACuB,WAAN,EAAJ,EAAyB;AAC9B,QAAM/B,OAAO,GAAGF,eAAe,CAACC,IAAD,CAA/B;;AAEA,QAAIC,OAAJ,EAAa;AACX,UAAMgC,QAAQ,GAAGhC,OAAO,CACrBiC,GADc,CACV,UAAAC,KAAK;AAAA,eAAI5B,aAAa,CAAC,gBAAKP,IAAL,EAAWmC,KAAX,CAAD,EAAoB3B,OAApB,CAAjB;AAAA,OADK,EAEd4B,MAFc,CAEP,UAAAC,CAAC;AAAA,eAAI,CAAC,CAACA,CAAN;AAAA,OAFM,CAAjB;AAIA1B,MAAAA,WAAW,CAACsB,QAAZ,GAAuBA,QAAvB;;AACA,UAAI,EAACzB,OAAD,aAACA,OAAD,uBAACA,OAAO,CAAEI,GAAV,CAAJ,EAAmB;AACjBD,QAAAA,WAAW,CAACQ,IAAZ,GAAmBc,QAAQ,CAACK,MAAT,CAAgB,UAACC,IAAD,EAAOC,GAAP;AAAA,iBAAeD,IAAI,GAAGC,GAAG,CAACrB,IAA1B;AAAA,SAAhB,EAAgD,CAAhD,CAAnB;AACD;;AACDR,MAAAA,WAAW,CAACkB,IAAZ,GAAmBxD,KAAK,CAACE,SAAzB;AACD;AACF,GAdM,MAcA;AACL,WAAO,IAAP;AACD;;AAED,SAAOoC,WAAP;AACD,CAlDD;;AAoDA,IAAM8B,KAAK,GAAG,SAARA,KAAQ,CAACC,IAAD,EAAOlC,OAAP,EAAmB;AAC/B,MAAI,CAACA,OAAL,EAAc;AACZ,WAAOkC,IAAP;AACD;;AAH8B,uBAIuBlC,OAJvB,CAIvBmC,KAJuB;AAAA,MAIvBA,KAJuB,+BAIf,EAJe;AAAA,yBAIuBnC,OAJvB,CAIXoC,OAJW;AAAA,MAIXA,OAJW,iCAID,EAJC;AAAA,4BAIuBpC,OAJvB,CAIGqC,UAJH;AAAA,MAIGA,UAJH,oCAIgB,EAJhB;AAK/B,SAAOF,KAAK,GAAGC,OAAR,GAAkBC,UAAlB,GAA+BH,IAA/B,GAAsC7D,WAAW,CAACC,KAAzD;AACD,CAND;;AAQA,IAAMgE,QAAQ,GAAG,SAAXA,QAAW,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqBC,KAArB;AAAA,SAA+BC,OAAO,CAACC,GAAR,CAC9CX,KAAK,CAACjE,UAAU,CAACG,YAAX,CAAwB0E,MAAxB,CAA+BH,KAA/B,CAAD,CADyC,EAE9CT,KAAK,CAACM,KAAK,KAAKC,KAAK,CAACM,MAAN,GAAe,CAAzB,IAA8BL,IAAI,CAACpB,IAAL,KAAcxD,KAAK,CAACE,SAAlD,GAA8DC,UAAU,CAACC,YAAzE,GAAwFD,UAAU,CAACE,OAApG,CAFyC,EAG9C+D,KAAK,CAACQ,IAAI,CAACvC,IAAN,CAHyC,EAI7CuC,IAAI,CAACpB,IAAL,KAAcxD,KAAK,CAACC,IAApB,IAA4B,EAAC2E,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEnB,MAAP,CAA7B,GAA8CW,KAAK,CAACQ,IAAI,CAAC3B,IAAN,EAAY;AAAEqB,IAAAA,KAAK,EAAEtD,UAAU,CAACK;AAApB,GAAZ,CAAnD,GAA6F,EAJ/C,CAA/B;AAAA,CAAjB;;AAOA,IAAM6D,aAAa,GAAG,SAAhBA,aAAgB,CAACP,KAAD,EAAsB;AAAA,MAAdE,KAAc,uEAAN,CAAM;AAC1CF,EAAAA,KAAK,CAACd,GAAN,CAAU,UAACe,IAAD,EAAOF,KAAP,EAAiB;AACzBD,IAAAA,QAAQ,CAACC,KAAD,EAAQC,KAAR,EAAeC,IAAf,EAAqBC,KAArB,CAAR;;AAEA,QAAID,IAAI,CAACpB,IAAL,KAAcxD,KAAK,CAACE,SAAxB,EAAmC;AACjC,UAAI,CAAC,EAAC0E,IAAD,aAACA,IAAD,uBAACA,IAAI,CAAEhB,QAAN,CAAeqB,MAAhB,CAAL,EAA6B;AAC3BC,QAAAA,aAAa,CAACN,IAAI,CAAChB,QAAN,EAAgBiB,KAAK,GAAG,CAAxB,CAAb;AACD;AACF;AACF,GARD;AASD,CAVD;;AAYA,IAAMM,KAAK,GAAG,SAARA,KAAQ,CAACxD,IAAD,EAAOQ,OAAP,EAAmB;AAC/B,MAAMwC,KAAK,GAAGzC,aAAa,CAACP,IAAD,EAAOQ,OAAP,CAA3B;;AACA,MAAIA,OAAJ,aAAIA,OAAJ,uBAAIA,OAAO,CAAEI,GAAb,EAAkB;AAChBuC,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAK,CAACtC,IAAlB;AACA6C,IAAAA,aAAa,CAACP,KAAK,CAACf,QAAP,CAAb;AACD,GAL8B,CAM/B;;AACD,CAPD;;AASAuB,KAAK,CAAC,iDAAD,EAAoD;AAAE3C,EAAAA,OAAO,EAAE,CAAC,cAAD,EAAiB,MAAjB,EAAyB,OAAzB,CAAX;AAA8CS,EAAAA,IAAI,EAAE,IAApD;AAA0DV,EAAAA,GAAG,EAAE;AAA/D,CAApD,CAAL",
      "sourceRoot": "/Users/antoineaudrain/Documents/Workspace/folder-structure/",
      "sourcesContent": [
        "import { readdirSync, statSync, readFileSync } from 'fs'\nimport { basename, extname, join } from 'path'\nimport crypto from 'crypto'\n\nconst types = {\n  FILE: 'FILE',\n  DIRECTORY: 'DIRECTORY'\n}\n\nconst characters = {\n  LAST_ELEMENT: '└─',\n  ELEMENT: '├─',\n  IN_DIRECTORY: ' │',\n  EMPTY: '  '\n}\n\nconst fontSpecial = {\n  RESET: '\\x1b[0m',\n  BRIGHT: '\\x1b[1m',\n  DIM: '\\x1b[2m',\n  UNDERSCORE: '\\x1b[4m',\n  BLINK: '\\x1b[5m',\n  REVERSE: '\\x1b[7m',\n  HIDDEN: '\\x1b[8m'\n}\n\nconst fontColors = {\n  BLACK: '\\x1b[37m',\n  RED: '\\x1b[31m',\n  GREEN: '\\x1b[32m',\n  YELLOW: '\\x1b[33m',\n  BLUE: '\\x1b[34m',\n  MAGENTA: '\\x1b[35m',\n  CYAN: '\\x1b[36m',\n  WHITE: '\\x1b[30m'\n}\n\nconst bgColors = {\n  BLACK: '\\x1b[40m',\n  RED: '\\x1b[41m',\n  GREEN: '\\x1b[42m',\n  YELLOW: '\\x1b[43m',\n  BLUE: '\\x1b[44m',\n  MAGENTA: '\\x1b[45m',\n  CYAN: '\\x1b[46m',\n  WHITE: '\\x1b[47m'\n}\n\nconst safeReadDirSync = (path) => {\n  let dirData = {}\n  try {\n    dirData = readdirSync(path)\n  } catch (error) {\n    if (error.code === 'EACCES' || error.code === 'EPERM') {\n      return null\n    }\n    throw new Error(error)\n  }\n  return dirData\n}\n\nconst normalizePath = (path) => path.replace(/\\\\/g, '/')\n\nconst directoryTree = (path, options) => {\n  path = options?.normalizePath ? normalizePath(path) : path\n\n  const stats = statSync(path)\n  const name = basename(path)\n  const currentNode = { name }\n\n  if (!options?.gui) {\n    currentNode.path = path\n  }\n\n  if (options?.exclude) {\n    const exclusions = typeof options?.exclude === 'object' ? options.exclude : [options.exclude]\n    if (exclusions.some((exclusion) => path.includes(exclusion))) {\n      return null\n    }\n  }\n\n  if (stats.isFile()) {\n\n    if (!options?.gui) {\n      currentNode.size = stats.size\n      currentNode.extension = extname(path).toLowerCase() || null\n    }\n    if (options?.hash) {\n      const data = readFileSync(path)\n      currentNode.hash = '#' + crypto.createHash('sha1').update(data).digest('hex').slice(0, 7)\n    }\n    currentNode.type = types.FILE\n    currentNode.hidden = currentNode.name.substr(0, 1) === '.'\n\n  } else if (stats.isDirectory()) {\n    const dirData = safeReadDirSync(path)\n\n    if (dirData) {\n      const children = dirData\n        .map(child => directoryTree(join(path, child), options))\n        .filter(e => !!e)\n\n      currentNode.children = children\n      if (!options?.gui) {\n        currentNode.size = children.reduce((prev, cur) => prev + cur.size, 0)\n      }\n      currentNode.type = types.DIRECTORY\n    }\n  } else {\n    return null\n  }\n\n  return currentNode\n}\n\nconst chalk = (text, options) => {\n  if (!options) {\n    return text\n  }\n  const { color = '', special = '', background = '' } = options\n  return color + special + background + text + fontSpecial.RESET\n}\n\nconst drawLine = (index, nodes, node, depth) => console.log(\n  chalk(characters.IN_DIRECTORY.repeat(depth)),\n  chalk(index === nodes.length - 1 && node.type !== types.DIRECTORY ? characters.LAST_ELEMENT : characters.ELEMENT),\n  chalk(node.name),\n  (node.type === types.FILE && !node?.hidden) ? chalk(node.hash, { color: fontColors.BLUE }) : ''\n)\n\nconst drawAsciiTree = (nodes, depth = 0) => {\n  nodes.map((node, index) => {\n    drawLine(index, nodes, node, depth)\n\n    if (node.type === types.DIRECTORY) {\n      if (!!node?.children.length) {\n        drawAsciiTree(node.children, depth + 1)\n      }\n    }\n  })\n}\n\nconst leafy = (path, options) => {\n  const nodes = directoryTree(path, options)\n  if (options?.gui) {\n    console.log(nodes.name)\n    drawAsciiTree(nodes.children)\n  }\n  // console.log(nodes)\n}\n\nleafy('../../../Documents/Workspace/cooky/cooky-server', { exclude: ['node_modules', '.git', '.idea'], hash: true, gui: true })"
      ]
    },
    "sourceType": "script",
    "mtime": 1600201376753
  }
}